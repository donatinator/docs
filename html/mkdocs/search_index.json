{
    "docs": [
        {
            "location": "/",
            "text": "The Donatinator\n\n\nThe Donatinator is an open-source web application to help you accept One-Off or Recurring Donations for your charity or\nnon-profit. It is written in nodejs, uses Postgres, and can be hosted on your own server, Heroku, AppEngine, and many\nother hosting sites. It uses Stripe for payment processing.\n\n\nFeatures\n\n\nThough this project is still young, it already has a solid feature set and is stable. Future improvements will be built\non top of the foundation already provided.\n\n\n\n\naccept single/one-off donations\n\n\nset up recurring donations (weekly, monthly, yearly)\n\n\nset default currency\n\n\ncontent pages written in Markdown\n\n\nembed a donation form into your current site (coming soon!)\n\n\nset up 'Campaigns' for you to raise funds (coming soon!)\n\n\nallow your supporters to set up a 'Fund Raising' page (coming soon!)\n\n\n\n\nEssentially we want the Donatinator to be as featureful as any of the hosted (paid) sites out there and in fact, a\nsuperset of what any specific one of them provides.\n\n\nDemo Sites\n\n\nA demo site can be seen at \ndonatinator.herokuapp.com\n.\n\n\nIn the future, we will set up demo sites on all of the following platforms:\n\n\n\n\nHeroku (Done)\n\n\nGoogle AppEngine\n\n\nOpenShift\n\n\nnow.sh\n\n\n(any others?)\n\n\n\n\nLicense\n\n\nThe Donatinator is AGPLv3 which means you can use it for free, forever. It also means that if you change it, you must\nlink to your changed source code so that the end-user can view it.\n\n\nAuthor\n\n\nWritten by Andrew Chilton.\n\n\n\n\nandychilton at gmail.com\n\n\nchilts.org\n\n\nTwitter:andychilton\n\n\nGitHub:chilts\n\n\n\n\n(Ends)",
            "title": "Home"
        },
        {
            "location": "/#the-donatinator",
            "text": "The Donatinator is an open-source web application to help you accept One-Off or Recurring Donations for your charity or\nnon-profit. It is written in nodejs, uses Postgres, and can be hosted on your own server, Heroku, AppEngine, and many\nother hosting sites. It uses Stripe for payment processing.",
            "title": "The Donatinator"
        },
        {
            "location": "/#features",
            "text": "Though this project is still young, it already has a solid feature set and is stable. Future improvements will be built\non top of the foundation already provided.   accept single/one-off donations  set up recurring donations (weekly, monthly, yearly)  set default currency  content pages written in Markdown  embed a donation form into your current site (coming soon!)  set up 'Campaigns' for you to raise funds (coming soon!)  allow your supporters to set up a 'Fund Raising' page (coming soon!)   Essentially we want the Donatinator to be as featureful as any of the hosted (paid) sites out there and in fact, a\nsuperset of what any specific one of them provides.",
            "title": "Features"
        },
        {
            "location": "/#demo-sites",
            "text": "A demo site can be seen at  donatinator.herokuapp.com .  In the future, we will set up demo sites on all of the following platforms:   Heroku (Done)  Google AppEngine  OpenShift  now.sh  (any others?)",
            "title": "Demo Sites"
        },
        {
            "location": "/#license",
            "text": "The Donatinator is AGPLv3 which means you can use it for free, forever. It also means that if you change it, you must\nlink to your changed source code so that the end-user can view it.",
            "title": "License"
        },
        {
            "location": "/#author",
            "text": "Written by Andrew Chilton.   andychilton at gmail.com  chilts.org  Twitter:andychilton  GitHub:chilts   (Ends)",
            "title": "Author"
        },
        {
            "location": "/user/getting-started/",
            "text": "Getting Started\n\n\nThere are a few different ways you can deploy The Donatinator. For this mini-guide to get you started, we're going to\ndeploy onto Heroku using their free-plan, and their free database tier.\n\n\nWe'll be setting up a site for a fictional charity called \"Save our Pencils\", and the project will just be called\n\npencils\n.\n\n\nClone the repo from GitLab\n\n\nThe first thing to do is get a copy of the code. This guide assumes you already have \ngit\n installed locally. Let's\nclone the public Git endpoint into a directory called \npencils\n:\n\n\n$ git clone https://gitlab.com/donatinator/donatinator.git pencils\nCloning into 'pencils'...\nremote: Counting objects: 791, done.\nremote: Compressing objects: 100% (278/278), done.\nremote: Total 791 (delta 525), reused 750 (delta 497)\nReceiving objects: 100% (791/791), 293.65 KiB | 0 bytes/s, done.\nResolving deltas: 100% (525/525), done.\nChecking connectivity... done.\n\n\n\n\nAnd head into that directory for the rest of this guide:\n\n\n$ cd pencils\n\n\n\n\nThat's all that is needed locally to be able to push to Heroku. You don't even need to install any npm dependencies\nsince Heroku will do that during the build phase. We'll be adding the remote Heroku repo shortly.\n\n\nCreate a Project on Heroku\n\n\nThis guide assumes you have a Heroku account and have installed the Heroku CLI tool locally. We also assume you have set it up correctly which you can check with the following command:\n\n\n$ heroku apps\n=== andychilton@gmail.com Apps\ndonatinator\n\n\n\n\nAs you can see I already have one app which is the demo app using Stripe's test credentials. So let's create another\none for our fictional charity. Also see Heroku's docs on\n\nCreating an App\n.\n\n\n$ heroku apps:create pencils\nCreating \u2b22 pencils... done\nhttps://pencils.herokuapp.com/ | https://git.heroku.com/pencils.git\n\n\n\n\nAnd let's check it is now listed:\n\n\n$ heroku apps\nryloth:~<>$ heroku apps\n=== andychilton@gmail.com Apps\ndonatinator\npencils\n\n\n\n\nYou'll also see that the previous command has added a Git remote to your local \n.git/config\n file:\n\n\n$ cat .git/config\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = https://gitlab.com/donatinator/donatinator.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[remote \"heroku\"]\n    url = https://git.heroku.com/pencils.git\n    fetch = +refs/heads/*:refs/remotes/heroku/*\n\n\n\n\nWe'll be using this when we want to push our code to Heroku, or when we want to push a new update.\n\n\nCreate a Postgres Database\n\n\nSince Heroku also has a free tier for their database offering, we'll use that here. It is noted that they deem the free\ntier to be non-production, however for the purposes of this guide we'll set it up as such. It is up to you to determine\nif this will fulfill your requirements for your project.\n\n\n$ heroku addons:create heroku-postgresql:hobby-dev\nCreating heroku-postgresql:hobby-dev on \u2b22 pencils... free\nDatabase has been created and is available\n ! This database is empty. If upgrading, you can transfer\n ! data from another database with pg:copy\nCreated postgresql-concave-123456 as DATABASE_URL\nUse heroku addons:docs heroku-postgresql to view documentation\n\n\n\n\nAwesome. It's telling us that the database is empty, and for now that's okay since the schema will be set up the first\ntime Donatinator starts up.\n\n\nNow, for the first time, let's have a look at the current config so you can see the \nDATABASE_URL\n that was set up in the previous command:\n\n\n$ heroku config\n=== pencils Config Vars\nDATABASE_URL: postgres://user:pass@ec2-1-2-3-4.compute-1.amazonaws.com:5432/db-name\n\n\n\n\nPerfect, since Donatinator will read the \nDATABASE_URL\n automatically on startup.\n\n\nSet up some environment variables\n\n\nThe first one you're going to set up is a session key for your cookies which are used when your admin staff log\nin. This one is pretty easy to set, so we'll do that first before moving on to your Stripe credentials.\n\n\nFirstly, let's generate a session key, then set it in your environment:\n\n\n$ pwgen -s 32 1\nJPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\n$ heroku config:set SESSION_KEY=JPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\nSetting SESSION_KEY and restarting \u2b22 pencils... done, v4\nSESSION_KEY: JPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\n\n\n\n\nThere are now three other env vars we're going to set and you'll have to log in to your Stripe account to get them.\nJust remember to use either the test keys if you're just setting up a test instance, or use your live keys if you're\nsetting up your donor portal for real.\n\n\nThe three keys you'll eventually need are \nSTRIPE_PUBLIC_KEY\n, \nSTRIPE_SECRET_KEY\n, and \nSTRIPE_ENDPOINT_SECRET\n but\nwe'll skip the latter for now, since that is used for Stripe sending us webhooks which we'll set up later. Using the\nsame command as before, but setting the public and secret keys at the same time:\n\n\n$ heroku config:set STRIPE_PUBLIC_KEY=pk_test_... STRIPE_SECRET_KEY=sk_test_...\nSetting SESSION_KEY and restarting \u2b22 pencils... done, v5\nSTRIPE_PUBLIC_KEY: pk_test_...\nSTRIPE_SECRET_KEY: sk_test_...\n\n\n\n\nIf you want to check these are correct, list your config again where you'll see all four we have set above:\n\n\n$ heroku config\nDATABASE_URL:      postgres://user:pass@ec2-1-2-3-4.compute-1.amazonaws.com:5432/db-name\nSESSION_KEY:       JPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\nSTRIPE_PUBLIC_KEY: pk_live_...\nSTRIPE_SECRET_KEY: sk_live_...\n\n\n\n\nAwesome! We're almost there.\n\n\nPushing new Code\n\n\nSince we added the \nheroku\n remote to your Git config, we can now push the latest code up to Heroku, to build and deploy for us. Here's a short command with a long output. You don't have to read it all, but hopefully it'll all work the same for you:\n\n\n$ git push heroku master\nCounting objects: 793, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (252/252), done.\nWriting objects: 100% (793/793), 293.85 KiB | 0 bytes/s, done.\nTotal 793 (delta 526), reused 791 (delta 525)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----> Node.js app detected\nremote:\nremote: -----> Creating runtime environment\nremote:\nremote:        NPM_CONFIG_LOGLEVEL=error\nremote:        NODE_VERBOSE=false\nremote:        NODE_ENV=production\nremote:        NODE_MODULES_CACHE=true\nremote:\nremote: -----> Installing binaries\nremote:        engines.node (package.json):  unspecified\nremote:        engines.npm (package.json):   unspecified (use default)\nremote:\nremote:        Resolving node version 8.x...\nremote:        Downloading and installing node 8.11.1...\nremote:        Using default npm version: 5.6.0\nremote:\nremote: -----> Restoring cache\nremote:        Skipping cache restore (not-found)\nremote:\nremote: -----> Building dependencies\nremote:        Installing node modules (package.json + package-lock)\nremote:\nremote:        > bcrypt@1.0.3 install /tmp/build_e06a5c16754f5a622f4633f4f5e8bd28/node_modules/bcrypt\nremote:        > node-pre-gyp install --fallback-to-build\nremote:\nremote:        [bcrypt] Success: \"/tmp/build_e06a5c16754f5a622f4633f4f5e8bd28/node_modules/bcrypt/lib/binding/bcrypt_lib.node\" is installed via remote\nremote:        added 277 packages in 6.699s\nremote:\nremote: -----> Caching build\nremote:        Clearing previous node cache\nremote:        Saving 2 cacheDirectories (default):\nremote:        - node_modules\nremote:        - bower_components (nothing to cache)\nremote:\nremote: -----> Pruning devDependencies\nremote:        Skipping because npm 5.6.0 sometimes fails when running 'npm prune' due to a known issue\nremote:        https://github.com/npm/npm/issues/19356\nremote:\nremote:        You can silence this warning by updating to at least npm 5.7.1 in your package.json\nremote:        https://devcenter.heroku.com/articles/nodejs-support#specifying-an-npm-version\nremote:\nremote: -----> Build succeeded!\nremote: -----> Discovering process types\nremote:        Procfile declares types     -> (none)\nremote:        Default types for buildpack -> web\nremote:\nremote: -----> Compressing...\nremote:        Done: 22.8M\nremote: -----> Launching...\nremote:        Released v6\nremote:        https://pencils.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/pencils.git\n * [new branch]      master -> master\n\n\n\n\nAnd finally, you can now open your instance in your browser:\n\n\n$ heroku open\n\n\n\n\nYou app should look something like this:\n\n\n\n\nIf so, congratulations! Your setup is working but not quite complete. And yay, you already have a secure site almost\nready to take donations.\n\n\nSince we haven't set the \nSTRIPE_ENDPOINT_SECRET\n config var yet, this screen appears just to remind you what else you\nhave to do.\n\n\n(Ends)",
            "title": "Getting Started"
        },
        {
            "location": "/user/getting-started/#getting-started",
            "text": "There are a few different ways you can deploy The Donatinator. For this mini-guide to get you started, we're going to\ndeploy onto Heroku using their free-plan, and their free database tier.  We'll be setting up a site for a fictional charity called \"Save our Pencils\", and the project will just be called pencils .",
            "title": "Getting Started"
        },
        {
            "location": "/user/getting-started/#clone-the-repo-from-gitlab",
            "text": "The first thing to do is get a copy of the code. This guide assumes you already have  git  installed locally. Let's\nclone the public Git endpoint into a directory called  pencils :  $ git clone https://gitlab.com/donatinator/donatinator.git pencils\nCloning into 'pencils'...\nremote: Counting objects: 791, done.\nremote: Compressing objects: 100% (278/278), done.\nremote: Total 791 (delta 525), reused 750 (delta 497)\nReceiving objects: 100% (791/791), 293.65 KiB | 0 bytes/s, done.\nResolving deltas: 100% (525/525), done.\nChecking connectivity... done.  And head into that directory for the rest of this guide:  $ cd pencils  That's all that is needed locally to be able to push to Heroku. You don't even need to install any npm dependencies\nsince Heroku will do that during the build phase. We'll be adding the remote Heroku repo shortly.",
            "title": "Clone the repo from GitLab"
        },
        {
            "location": "/user/getting-started/#create-a-project-on-heroku",
            "text": "This guide assumes you have a Heroku account and have installed the Heroku CLI tool locally. We also assume you have set it up correctly which you can check with the following command:  $ heroku apps\n=== andychilton@gmail.com Apps\ndonatinator  As you can see I already have one app which is the demo app using Stripe's test credentials. So let's create another\none for our fictional charity. Also see Heroku's docs on Creating an App .  $ heroku apps:create pencils\nCreating \u2b22 pencils... done\nhttps://pencils.herokuapp.com/ | https://git.heroku.com/pencils.git  And let's check it is now listed:  $ heroku apps\nryloth:~<>$ heroku apps\n=== andychilton@gmail.com Apps\ndonatinator\npencils  You'll also see that the previous command has added a Git remote to your local  .git/config  file:  $ cat .git/config\n[core]\n    repositoryformatversion = 0\n    filemode = true\n    bare = false\n    logallrefupdates = true\n[remote \"origin\"]\n    url = https://gitlab.com/donatinator/donatinator.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[remote \"heroku\"]\n    url = https://git.heroku.com/pencils.git\n    fetch = +refs/heads/*:refs/remotes/heroku/*  We'll be using this when we want to push our code to Heroku, or when we want to push a new update.",
            "title": "Create a Project on Heroku"
        },
        {
            "location": "/user/getting-started/#create-a-postgres-database",
            "text": "Since Heroku also has a free tier for their database offering, we'll use that here. It is noted that they deem the free\ntier to be non-production, however for the purposes of this guide we'll set it up as such. It is up to you to determine\nif this will fulfill your requirements for your project.  $ heroku addons:create heroku-postgresql:hobby-dev\nCreating heroku-postgresql:hobby-dev on \u2b22 pencils... free\nDatabase has been created and is available\n ! This database is empty. If upgrading, you can transfer\n ! data from another database with pg:copy\nCreated postgresql-concave-123456 as DATABASE_URL\nUse heroku addons:docs heroku-postgresql to view documentation  Awesome. It's telling us that the database is empty, and for now that's okay since the schema will be set up the first\ntime Donatinator starts up.  Now, for the first time, let's have a look at the current config so you can see the  DATABASE_URL  that was set up in the previous command:  $ heroku config\n=== pencils Config Vars\nDATABASE_URL: postgres://user:pass@ec2-1-2-3-4.compute-1.amazonaws.com:5432/db-name  Perfect, since Donatinator will read the  DATABASE_URL  automatically on startup.",
            "title": "Create a Postgres Database"
        },
        {
            "location": "/user/getting-started/#set-up-some-environment-variables",
            "text": "The first one you're going to set up is a session key for your cookies which are used when your admin staff log\nin. This one is pretty easy to set, so we'll do that first before moving on to your Stripe credentials.  Firstly, let's generate a session key, then set it in your environment:  $ pwgen -s 32 1\nJPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\n$ heroku config:set SESSION_KEY=JPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\nSetting SESSION_KEY and restarting \u2b22 pencils... done, v4\nSESSION_KEY: JPx58tdfC4a2ernbsvBRuXp5d0eH5s6T  There are now three other env vars we're going to set and you'll have to log in to your Stripe account to get them.\nJust remember to use either the test keys if you're just setting up a test instance, or use your live keys if you're\nsetting up your donor portal for real.  The three keys you'll eventually need are  STRIPE_PUBLIC_KEY ,  STRIPE_SECRET_KEY , and  STRIPE_ENDPOINT_SECRET  but\nwe'll skip the latter for now, since that is used for Stripe sending us webhooks which we'll set up later. Using the\nsame command as before, but setting the public and secret keys at the same time:  $ heroku config:set STRIPE_PUBLIC_KEY=pk_test_... STRIPE_SECRET_KEY=sk_test_...\nSetting SESSION_KEY and restarting \u2b22 pencils... done, v5\nSTRIPE_PUBLIC_KEY: pk_test_...\nSTRIPE_SECRET_KEY: sk_test_...  If you want to check these are correct, list your config again where you'll see all four we have set above:  $ heroku config\nDATABASE_URL:      postgres://user:pass@ec2-1-2-3-4.compute-1.amazonaws.com:5432/db-name\nSESSION_KEY:       JPx58tdfC4a2ernbsvBRuXp5d0eH5s6T\nSTRIPE_PUBLIC_KEY: pk_live_...\nSTRIPE_SECRET_KEY: sk_live_...  Awesome! We're almost there.",
            "title": "Set up some environment variables"
        },
        {
            "location": "/user/getting-started/#pushing-new-code",
            "text": "Since we added the  heroku  remote to your Git config, we can now push the latest code up to Heroku, to build and deploy for us. Here's a short command with a long output. You don't have to read it all, but hopefully it'll all work the same for you:  $ git push heroku master\nCounting objects: 793, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (252/252), done.\nWriting objects: 100% (793/793), 293.85 KiB | 0 bytes/s, done.\nTotal 793 (delta 526), reused 791 (delta 525)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----> Node.js app detected\nremote:\nremote: -----> Creating runtime environment\nremote:\nremote:        NPM_CONFIG_LOGLEVEL=error\nremote:        NODE_VERBOSE=false\nremote:        NODE_ENV=production\nremote:        NODE_MODULES_CACHE=true\nremote:\nremote: -----> Installing binaries\nremote:        engines.node (package.json):  unspecified\nremote:        engines.npm (package.json):   unspecified (use default)\nremote:\nremote:        Resolving node version 8.x...\nremote:        Downloading and installing node 8.11.1...\nremote:        Using default npm version: 5.6.0\nremote:\nremote: -----> Restoring cache\nremote:        Skipping cache restore (not-found)\nremote:\nremote: -----> Building dependencies\nremote:        Installing node modules (package.json + package-lock)\nremote:\nremote:        > bcrypt@1.0.3 install /tmp/build_e06a5c16754f5a622f4633f4f5e8bd28/node_modules/bcrypt\nremote:        > node-pre-gyp install --fallback-to-build\nremote:\nremote:        [bcrypt] Success: \"/tmp/build_e06a5c16754f5a622f4633f4f5e8bd28/node_modules/bcrypt/lib/binding/bcrypt_lib.node\" is installed via remote\nremote:        added 277 packages in 6.699s\nremote:\nremote: -----> Caching build\nremote:        Clearing previous node cache\nremote:        Saving 2 cacheDirectories (default):\nremote:        - node_modules\nremote:        - bower_components (nothing to cache)\nremote:\nremote: -----> Pruning devDependencies\nremote:        Skipping because npm 5.6.0 sometimes fails when running 'npm prune' due to a known issue\nremote:        https://github.com/npm/npm/issues/19356\nremote:\nremote:        You can silence this warning by updating to at least npm 5.7.1 in your package.json\nremote:        https://devcenter.heroku.com/articles/nodejs-support#specifying-an-npm-version\nremote:\nremote: -----> Build succeeded!\nremote: -----> Discovering process types\nremote:        Procfile declares types     -> (none)\nremote:        Default types for buildpack -> web\nremote:\nremote: -----> Compressing...\nremote:        Done: 22.8M\nremote: -----> Launching...\nremote:        Released v6\nremote:        https://pencils.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/pencils.git\n * [new branch]      master -> master  And finally, you can now open your instance in your browser:  $ heroku open  You app should look something like this:   If so, congratulations! Your setup is working but not quite complete. And yay, you already have a secure site almost\nready to take donations.  Since we haven't set the  STRIPE_ENDPOINT_SECRET  config var yet, this screen appears just to remind you what else you\nhave to do.  (Ends)",
            "title": "Pushing new Code"
        },
        {
            "location": "/user/single-donations/",
            "text": "Single Donations\n\n\n(Ends)",
            "title": "Single Donations"
        },
        {
            "location": "/user/single-donations/#single-donations",
            "text": "(Ends)",
            "title": "Single Donations"
        },
        {
            "location": "/user/recurring-donations/",
            "text": "Recurring Donations\n\n\n(Ends)",
            "title": "Recurring Donations"
        },
        {
            "location": "/user/recurring-donations/#recurring-donations",
            "text": "(Ends)",
            "title": "Recurring Donations"
        },
        {
            "location": "/user/campaigns/",
            "text": "Campaigns\n\n\n(Ends)",
            "title": "Campaigns"
        },
        {
            "location": "/user/campaigns/#campaigns",
            "text": "(Ends)",
            "title": "Campaigns"
        },
        {
            "location": "/user/fundraising/",
            "text": "Fundraising\n\n\n(Ends)",
            "title": "Fundraising"
        },
        {
            "location": "/user/fundraising/#fundraising",
            "text": "(Ends)",
            "title": "Fundraising"
        },
        {
            "location": "/user/admin/",
            "text": "Admin\n\n\n(Ends)",
            "title": "Admin"
        },
        {
            "location": "/user/admin/#admin",
            "text": "(Ends)",
            "title": "Admin"
        },
        {
            "location": "/user/terminology/",
            "text": "Terminology\n\n\nIn most cases we use the same terminology as other charities or non-profits use. We also try and stick to the same\nterms as what Stripe uses, but sometimes we use alternative terms if it makes more sense. Here we try and demistify\nsome of the terms you may see reguarding online donations.\n\n\n\n\nOne-Off Donation\n\n\na single donation by a person\n\n\n\n\n\n\nPlan\n\n\ndescribes how much should be donated and at what interval\n\n\n\n\n\n\nRecurring Donations\n\n\nsee \nPlan\n\n\n\n\n\n\nSingle Donation\n\n\nsee \nOne-Off Donation\n\n\n\n\n\n\nSubscriber\n (aka 'Supporter', 'Donor', 'Friend')\n\n\nthe person who donates regularly (ie. has a subscription)\n\n\n\n\n\n\nSubscription\n\n\na promise of a regular payment (described by a \nPlan\n) from a \nSubscriber\n\n\n\n\n\n\n\n\n(Ends)",
            "title": "Terminology"
        },
        {
            "location": "/user/terminology/#terminology",
            "text": "In most cases we use the same terminology as other charities or non-profits use. We also try and stick to the same\nterms as what Stripe uses, but sometimes we use alternative terms if it makes more sense. Here we try and demistify\nsome of the terms you may see reguarding online donations.   One-Off Donation  a single donation by a person    Plan  describes how much should be donated and at what interval    Recurring Donations  see  Plan    Single Donation  see  One-Off Donation    Subscriber  (aka 'Supporter', 'Donor', 'Friend')  the person who donates regularly (ie. has a subscription)    Subscription  a promise of a regular payment (described by a  Plan ) from a  Subscriber     (Ends)",
            "title": "Terminology"
        },
        {
            "location": "/tech/considerations/",
            "text": "Considerations\n\n\nSome things to consider prior to using The Donatinator is what kind of installation you want. This may depend on\nwhether you currently have a website, and what your hosting already provides you. Let's split this up to make some\ndecisions easier.\n\n\nIs your current site secure (SSL enabled)?\n\n\nIf not, then you need have a link on your site which points to your secure Donatinator hosting. Whether the Donatinator\nis running on a sub-domain of your current domain or it uses the SSL enabled sub-domain of \n*.herokuapp.com\n or\n\n*.appspot.com\n is also up to you.\n\n\nNOTE\n: if your current site is not secure, then you shouldn't embed a Donatinator donation form within a page on\nyour site, since this will still be insecure.\n\n\nDo you have current website?\n\n\nYes/No? If not, you could use The Donatinator as your sole hosting if you only need basic content management.\n\n\nWould you like to accept payments through your current site?\n\n\nIf yes, then you'll need to decide how to integrate the Donatinator. Since the Donatiantor is a standalone app, then\nyou can either link directly to the Donatinator for the donors use, or you can embed a donation form on your\nsite. (Note: you can only embed a form if your current hosting is secure.)\n\n\n(Ends)",
            "title": "Considerations"
        },
        {
            "location": "/tech/considerations/#considerations",
            "text": "Some things to consider prior to using The Donatinator is what kind of installation you want. This may depend on\nwhether you currently have a website, and what your hosting already provides you. Let's split this up to make some\ndecisions easier.",
            "title": "Considerations"
        },
        {
            "location": "/tech/considerations/#is-your-current-site-secure-ssl-enabled",
            "text": "If not, then you need have a link on your site which points to your secure Donatinator hosting. Whether the Donatinator\nis running on a sub-domain of your current domain or it uses the SSL enabled sub-domain of  *.herokuapp.com  or *.appspot.com  is also up to you.  NOTE : if your current site is not secure, then you shouldn't embed a Donatinator donation form within a page on\nyour site, since this will still be insecure.",
            "title": "Is your current site secure (SSL enabled)?"
        },
        {
            "location": "/tech/considerations/#do-you-have-current-website",
            "text": "Yes/No? If not, you could use The Donatinator as your sole hosting if you only need basic content management.",
            "title": "Do you have current website?"
        },
        {
            "location": "/tech/considerations/#would-you-like-to-accept-payments-through-your-current-site",
            "text": "If yes, then you'll need to decide how to integrate the Donatinator. Since the Donatiantor is a standalone app, then\nyou can either link directly to the Donatinator for the donors use, or you can embed a donation form on your\nsite. (Note: you can only embed a form if your current hosting is secure.)  (Ends)",
            "title": "Would you like to accept payments through your current site?"
        },
        {
            "location": "/tech/hosting/",
            "text": "Hosting\n\n\nCurrently, the Donatinator can be hosted on various different PaaS solutions such as Heroku or OpenShift, run on your\nown server, or run through a container orchestration framework such as Kubernetes (coming soon) or Nomad (coming soon).\n\n\nPre-Requisites\n\n\nThe first (and only) thing you need is a Stripe account, your\n\nAPI keys\n\n(publishable key and secret key), and the signing secret from your\n\nwebhook\n\nconfiguration.\n\n\nHeroku\n\n\nThere are three ways you can set up your app on Heroku. This may depend on how technical you are, or whether you prefer\na one-click install, clicking around the Heroku Dashboard, or doing everything via the command line (or a combination\nof all these).\n\n\nVia the One Click Install\n\n\nToDo.\n\n\nVia the Heroku Dashboard\n\n\nFirstly, head into your \nHeroku Dashboard\n and create a new app.\n\n\nFrom here, you set the following environment variables in the settings tab:\n\n\n\n\nSTRIPE_PUBLIC_KEY\n\n\nSTRIPE_SECRET_KEY\n\n\nSTRIPE_ENDPOINT_SECRET\n\n\nDATABASE_URL\n\n\n\n\nFor this last config var, you also need to provision a database on the 'Resources' page of your app, by clicking on\n'Add-ons' and searching for Heroku Postgres. For now, just choose a \nHobbyDev - Free\n plan.\n\n\nOnce you've done the above, you need to clone the Donatinator code, set up the remote (use your own app name instead of \nfurry-goat-123\n), and finally push to Heroku:\n\n\n$ git clone https://gitlab.com/donatinator/donatinator.git\n$ cd donatinator\n$ heroku git:remote -a furry-goat-123\n$ git push heroku master\n\n\n\n\nYou may need to read the\n\nGit article on the Heroku docs\n\nfor more information.\n\n\nPlease\n\nlet us know\n\nhow you get on with these instructions.\n\n\nVia CLI\n\n\nYou can perform most of the above using the command line. ToDo.\n\n\n(Ends)",
            "title": "Hosting"
        },
        {
            "location": "/tech/hosting/#hosting",
            "text": "Currently, the Donatinator can be hosted on various different PaaS solutions such as Heroku or OpenShift, run on your\nown server, or run through a container orchestration framework such as Kubernetes (coming soon) or Nomad (coming soon).",
            "title": "Hosting"
        },
        {
            "location": "/tech/hosting/#pre-requisites",
            "text": "The first (and only) thing you need is a Stripe account, your API keys \n(publishable key and secret key), and the signing secret from your webhook \nconfiguration.",
            "title": "Pre-Requisites"
        },
        {
            "location": "/tech/hosting/#heroku",
            "text": "There are three ways you can set up your app on Heroku. This may depend on how technical you are, or whether you prefer\na one-click install, clicking around the Heroku Dashboard, or doing everything via the command line (or a combination\nof all these).",
            "title": "Heroku"
        },
        {
            "location": "/tech/hosting/#via-the-one-click-install",
            "text": "ToDo.",
            "title": "Via the One Click Install"
        },
        {
            "location": "/tech/hosting/#via-the-heroku-dashboard",
            "text": "Firstly, head into your  Heroku Dashboard  and create a new app.  From here, you set the following environment variables in the settings tab:   STRIPE_PUBLIC_KEY  STRIPE_SECRET_KEY  STRIPE_ENDPOINT_SECRET  DATABASE_URL   For this last config var, you also need to provision a database on the 'Resources' page of your app, by clicking on\n'Add-ons' and searching for Heroku Postgres. For now, just choose a  HobbyDev - Free  plan.  Once you've done the above, you need to clone the Donatinator code, set up the remote (use your own app name instead of  furry-goat-123 ), and finally push to Heroku:  $ git clone https://gitlab.com/donatinator/donatinator.git\n$ cd donatinator\n$ heroku git:remote -a furry-goat-123\n$ git push heroku master  You may need to read the Git article on the Heroku docs \nfor more information.  Please let us know \nhow you get on with these instructions.  Via CLI  You can perform most of the above using the command line. ToDo.  (Ends)",
            "title": "Via the Heroku Dashboard"
        },
        {
            "location": "/tech/environment/",
            "text": "Environment\n\n\nThe following environment variables are required to be set when starting The Donatinator.\n\n\nPORT\n\n\nSpecifies what port the webserver should listen on (default: 3000).\n\n\nDepending on your hosting this may be provided by the platform. If you host yourself you should provide it in the\nscript or environment you use to start the server. For example the Heroku platform provides this to your app directly\nevery time your server starts.\n\n\nNODE_ENV\n\n\nIn general you should set this to \nproduction\n. Any other value is not supported by us.\n\n\nSTRIPE_PUBLIC_KEY\n\n\nYour Stripe Publishable Key.\n\n\ne.g. \npk_live_abc123\n\n\nSTRIPE_SECRET_KEY\n\n\nYour Stripe Secret Key.\n\n\ne.g. \nsk_live_abc123\n\n\nSTRIPE_ENDPOINT_SECRET\n\n\nThe endpoint secret as specified when you set up a Stripe Webhook from within Stripe.\n\n\ne.g. \nwhsec_abc123\n\n\nNote: you can set up multiple endpoints in Stripe, so this is specific to the endpoint on your Donatinator app.\n\n\nDATABASE_URL\n\n\nSpecifies the fully qualified database URL your app's database resides on.\n\n\ne.g. \npostgres://username:password@host:5432/database-name\n\n\nThis is set automatically by the Heroku platform when you provision a Postgres add-on. You'll have to set this if you are hosting your app yourself.\n\n\n(Ends)",
            "title": "Environment"
        },
        {
            "location": "/tech/environment/#environment",
            "text": "The following environment variables are required to be set when starting The Donatinator.  PORT  Specifies what port the webserver should listen on (default: 3000).  Depending on your hosting this may be provided by the platform. If you host yourself you should provide it in the\nscript or environment you use to start the server. For example the Heroku platform provides this to your app directly\nevery time your server starts.  NODE_ENV  In general you should set this to  production . Any other value is not supported by us.  STRIPE_PUBLIC_KEY  Your Stripe Publishable Key.  e.g.  pk_live_abc123  STRIPE_SECRET_KEY  Your Stripe Secret Key.  e.g.  sk_live_abc123  STRIPE_ENDPOINT_SECRET  The endpoint secret as specified when you set up a Stripe Webhook from within Stripe.  e.g.  whsec_abc123  Note: you can set up multiple endpoints in Stripe, so this is specific to the endpoint on your Donatinator app.  DATABASE_URL  Specifies the fully qualified database URL your app's database resides on.  e.g.  postgres://username:password@host:5432/database-name  This is set automatically by the Heroku platform when you provision a Postgres add-on. You'll have to set this if you are hosting your app yourself.  (Ends)",
            "title": "Environment"
        },
        {
            "location": "/tech/themes/",
            "text": "Themes\n\n\nCurrently the Donatinator does not support themes, but we have plans to implement this in the future.\n\n\n(Ends)",
            "title": "Themes"
        },
        {
            "location": "/tech/themes/#themes",
            "text": "Currently the Donatinator does not support themes, but we have plans to implement this in the future.  (Ends)",
            "title": "Themes"
        },
        {
            "location": "/tech/plugins/",
            "text": "Plugins\n\n\nCurrently the Donatinator does not support plugins, but we have plans to implement this in the future.\n\n\n(Ends)",
            "title": "Plugins"
        },
        {
            "location": "/tech/plugins/#plugins",
            "text": "Currently the Donatinator does not support plugins, but we have plans to implement this in the future.  (Ends)",
            "title": "Plugins"
        },
        {
            "location": "/project/features/",
            "text": "Features\n\n\n(Ends)",
            "title": "Features"
        },
        {
            "location": "/project/features/#features",
            "text": "(Ends)",
            "title": "Features"
        },
        {
            "location": "/project/roadmap/",
            "text": "RoadMap\n\n\nWhilst we think the Donatinator is already great at managing and accepting donations online, we also believe there is a\nlong way to go to make it truly useful to all kinds of organisations.\n\n\nSoon : 1-3 months\n\n\n\n\nmore docs\n\n\ncampaigns\n - run a specific campaign such as a Christmas Campaign, or to raise funds for a piece of equipment\n\n\nfundraising\n - allow anyone (e.g. someone you helped) to start a fundraiser (e.g. 10km walk) and accept donations from their friends and family\n\n\n\n\nAlso see the \nNear Term\n milestone in GitLab.\n\n\nMedium Term : 3-6 months\n\n\n\n\nability for your donors to log in and manage their subscriptions\n\n\n\n\nAlso see the \nMedium Term\n milestone in GitLab.\n\n\nLong Term : 6-12 months\n\n\n\n\nToDo\n\n\n\n\nAlso see the \nLong Term\n milestone in GitLab.\n\n\n(Ends)",
            "title": "RoadMap"
        },
        {
            "location": "/project/roadmap/#roadmap",
            "text": "Whilst we think the Donatinator is already great at managing and accepting donations online, we also believe there is a\nlong way to go to make it truly useful to all kinds of organisations.",
            "title": "RoadMap"
        },
        {
            "location": "/project/roadmap/#soon-1-3-months",
            "text": "more docs  campaigns  - run a specific campaign such as a Christmas Campaign, or to raise funds for a piece of equipment  fundraising  - allow anyone (e.g. someone you helped) to start a fundraiser (e.g. 10km walk) and accept donations from their friends and family   Also see the  Near Term  milestone in GitLab.",
            "title": "Soon : 1-3 months"
        },
        {
            "location": "/project/roadmap/#medium-term-3-6-months",
            "text": "ability for your donors to log in and manage their subscriptions   Also see the  Medium Term  milestone in GitLab.",
            "title": "Medium Term : 3-6 months"
        },
        {
            "location": "/project/roadmap/#long-term-6-12-months",
            "text": "ToDo   Also see the  Long Term  milestone in GitLab.  (Ends)",
            "title": "Long Term : 6-12 months"
        },
        {
            "location": "/project/release-notes/",
            "text": "Release Notes\n\n\n(Ends)",
            "title": "Release Notes"
        },
        {
            "location": "/project/release-notes/#release-notes",
            "text": "(Ends)",
            "title": "Release Notes"
        },
        {
            "location": "/project/contributing/",
            "text": "Contributing\n\n\nWe use a standard fork, branch, commit, push, merge-request model on our repositories hosted on GitLab.\n\n\nWe also mirror our code on GitHub but issues and pull-requests are not accepted there, however you may fork our repo on\nthere if it is easier for you to do so.\n\n\nProcess\n\n\nIn general it is best to open an issue prior to starting work on a new feature or bug. Once done you'll have an issue\nnumber to group your work under.\n\n\nToDo.\n\n\nRepositories\n\n\n\n\ndonatinator\n - the server code needed to run your own donor portal\n\n\ndocs\n - documentation related to any part of this project\n\n\nrfcs\n - RFCs for large change-requests\n\n\n\n\nCommunication\n\n\nCurrently we hang out in #donatinator on Freenode but we do not have a forum or mailing list set up yet. Please let us\nknow if you would like to see either of these things happen.\n\n\nLicense\n\n\nBy contributing to The Donatinator, you agree that your contributions will be licensed under the same license as\nitself, the \nAGPLv3\n.\n\n\n(Ends)",
            "title": "Contributing"
        },
        {
            "location": "/project/contributing/#contributing",
            "text": "We use a standard fork, branch, commit, push, merge-request model on our repositories hosted on GitLab.  We also mirror our code on GitHub but issues and pull-requests are not accepted there, however you may fork our repo on\nthere if it is easier for you to do so.",
            "title": "Contributing"
        },
        {
            "location": "/project/contributing/#process",
            "text": "In general it is best to open an issue prior to starting work on a new feature or bug. Once done you'll have an issue\nnumber to group your work under.  ToDo.",
            "title": "Process"
        },
        {
            "location": "/project/contributing/#repositories",
            "text": "donatinator  - the server code needed to run your own donor portal  docs  - documentation related to any part of this project  rfcs  - RFCs for large change-requests",
            "title": "Repositories"
        },
        {
            "location": "/project/contributing/#communication",
            "text": "Currently we hang out in #donatinator on Freenode but we do not have a forum or mailing list set up yet. Please let us\nknow if you would like to see either of these things happen.",
            "title": "Communication"
        },
        {
            "location": "/project/contributing/#license",
            "text": "By contributing to The Donatinator, you agree that your contributions will be licensed under the same license as\nitself, the  AGPLv3 .  (Ends)",
            "title": "License"
        },
        {
            "location": "/project/rfcs/",
            "text": "Donatinator RFCs\n\n\nMany features, bug fixes or documentation improvements can be implemented and reviewed via the normal GitLab pull\nrequest workflow (see \nContributing\n for more information).\n\n\nHowever some changes are more substantial or backwards incompatible.\n\n\nThe \"RFC\" (request for comments) process is intended to provide a consistent and controlled path for these features to\nenter the project.\n\n\nWhy we have this process\n\n\nIn the case where a feature or bug fix is substantial or is backwards incompatible, then it is harder to determine both\nthe viability of the changes or whether they are actually a good idea. To be able to do this, we need multiple members\nof the community to read, review, and comment on the proposal.\n\n\nThis process is intended to help reach consensus on any feature that would affect the core ability to accept both\nsingle and recurring donations.\n\n\nOnly by doing this can we ensure the best outcome for everyone using The Donatinator.\n\n\nWhen you need to follow this process\n\n\nYou need to follow this process if you intend to make changes to any of The Donatinators code or docs that result in a\nsignificant change or a backwards incompatible change. This may include some of the following though this list is not\nexhaustive:\n\n\n\n\nWhen changing web client code which helps accept donations.\n\n\nWhen calling a Stripe API that deals with any kind of charge and/or subscription.\n\n\nWhen performing a destructive database schema change.\n\n\n\n\nSome changes do not require an RFC and those may go through the regular pull request process. If a PR is deemed to be\nsignificant or backwards incompatible, then the issue may be closed with a polite request suggesting an RFC is raised\ninstead.\n\n\nGathering Feedback\n\n\nIt's often helpful to gather feedback before diving too deeply into your new concept, just in case someone knows how to\nsolve it with the current release or with a small easy patch. This can save time for all concerned.\n\n\nOnce you're convinced that this feature \nis\n required, it's also helpful to obtain feedback prior to submitting your\nRFC. You may open an issue in the \nRFC repo\n to start a high-level discussion,\nwith the goal of eventually opening an RFC pull request with all the details gathered together in one document.\n\n\nThe RFC Process\n\n\nThere is a pre-process (hinted at above) and then the process itself.\n\n\nAs hinted at above, you can perform initial data gathering, obtain feedback, and perform some analysis. You may create\nan issue so that everyone on the project can see it and help you gather what you need. This step is optional. You may\ngo straight into the process itself.\n\n\n\n\nFork the \nRFC repo\n repo\n\n\nCopy \nYYYYMMDD-template.md\n file to \n1-incoming/20170906-my-feature.md\n (fill in todays date and \nmy-feature\n\n  describes your feature in a few words)\n\n\nFill in the RFC. Put care into the details: \nRFCs that do not present convincing motivation, demonstrate\n  understanding of the impact of the design, or are disingenuous about the drawbacks or alternatives tend to be\n  poorly-received\n.\n\n\nSubmit a pull request (with a 'Closes #nnn' of the issue number used for initial feedback).\n\n\nAs an RFC in the \nreviewing\n stage, it will be moved from \n1-incoming\n to \n2-reviewing\n under a new pull request for\n  discussion. It will now receive design feedback from the larger community. This PR will link back to the initial data\n  gathering ticket, as well as the pull request ticket.\n\n\nUnder the new \nreviewing\n issue, build consensus and integrate feedback. RFCs that have broad support are much more\n  likely to make progress than those that don't receive any comments. The author should be prepared to revise their\n  pull request with additional commits in response to any feedback received.\n\n\nEventually, the core team will decide whether the RFC is a candidate for inclusion into The Donatinator.\n\n\nRFCs that are candidates for inclusion in The Donatinator will enter a \"final comment period\" lasting 7 days. The\n  beginning of this period will be signaled with a comment such as \"Final comment period.\" and label on the RFC's pull\n  request. Furthermore, \nThe Donatinator's official Twitter account\n will post a\n  tweet about the RFC to attract the community's attention.\n\n\nAn RFC can be modified based upon feedback from the core team and community. Significant modifications may trigger a\n  new final comment period.\n\n\nAn RFC may be rejected by the core team after public discussion has settled and comments have been made summarizing\n  the rationale for rejection. A member of the core team should then close the RFC's associated pull request.\n\n\nAn RFC may be accepted at the close of its final comment period. A core team member will merge the RFC's associated\n  pull request, at which point the RFC will become 'active'.\n\n\n\n\nIf accepted, the \nreviewing\n PR will be updated to move the RFC to \n3-accepted\n. If not it'll be moved to\n\n5-rejected\n. Once the RFC has been accepted, anyone (not just the original proposer) can start to implement it. If the RFC is being actively worked on, it'll stay in the \n3-accepted\n stage.\n\n\nThe RFC Life-Cycle\n\n\nOnce an RFC becomes active then authors may implement it and submit the feature as a pull request to\n\nThe Donatinator repo\n. Moving to the \naccepted\n state is not a rubber\nstamp, and in particular still does not mean the feature will ultimately be merged; it does mean that the core team has\nagreed to it in principle and are amenable to merging it.\n\n\nFurthermore, the fact that a given RFC has been accepted implies nothing about what priority is assigned to its\nimplementation, nor whether anybody is currently working on it. If you're interested, it is worth asking around to see\nif anybody has an active interest in the RFC at any level.\n\n\nModifications to accepted/in-progress RFC's can be done in followup PR's. We strive to write each RFC in a manner that\nit will reflect the final design of the feature; but the nature of the process means that we cannot expect every merged\nRFC to actually reflect what the end result will be at the time of the next major release; therefore we try to keep\neach RFC document somewhat in sync with the language feature as planned, tracking such changes via followup pull\nrequests to the document.\n\n\nImplementing an RFC\n\n\nThe author of an RFC is not obligated to implement it. Of course, the RFC author (like any other developer) is welcome\nto post an implementation for review after the RFC has been accepted.\n\n\nIf you are interested in working on the implementation for an 'active' RFC, but cannot determine if someone else is\nalready working on it, feel free to ask (e.g. by leaving a comment on the associated issue).\n\n\nReviewing RFC's\n\n\nAt regular intervals, the core team will attempt to review whatever is currently in the RFC repo. This may involve\nmoving things along, providing feedback, or rejecting them entirely.\n\n\nCredits\n\n\nThanks to the following projects for having RFC processes that we were able to build on for our own process:\n\n\n\n\nhttps://github.com/yarnpkg/rfcs\n\n\nhttps://github.com/rust-lang/rfcs\n\n\nhttps://github.com/emberjs/rfcs\n\n\n\n\n(Ends)",
            "title": "RFCs"
        },
        {
            "location": "/project/rfcs/#donatinator-rfcs",
            "text": "Many features, bug fixes or documentation improvements can be implemented and reviewed via the normal GitLab pull\nrequest workflow (see  Contributing  for more information).  However some changes are more substantial or backwards incompatible.  The \"RFC\" (request for comments) process is intended to provide a consistent and controlled path for these features to\nenter the project.",
            "title": "Donatinator RFCs"
        },
        {
            "location": "/project/rfcs/#why-we-have-this-process",
            "text": "In the case where a feature or bug fix is substantial or is backwards incompatible, then it is harder to determine both\nthe viability of the changes or whether they are actually a good idea. To be able to do this, we need multiple members\nof the community to read, review, and comment on the proposal.  This process is intended to help reach consensus on any feature that would affect the core ability to accept both\nsingle and recurring donations.  Only by doing this can we ensure the best outcome for everyone using The Donatinator.",
            "title": "Why we have this process"
        },
        {
            "location": "/project/rfcs/#when-you-need-to-follow-this-process",
            "text": "You need to follow this process if you intend to make changes to any of The Donatinators code or docs that result in a\nsignificant change or a backwards incompatible change. This may include some of the following though this list is not\nexhaustive:   When changing web client code which helps accept donations.  When calling a Stripe API that deals with any kind of charge and/or subscription.  When performing a destructive database schema change.   Some changes do not require an RFC and those may go through the regular pull request process. If a PR is deemed to be\nsignificant or backwards incompatible, then the issue may be closed with a polite request suggesting an RFC is raised\ninstead.",
            "title": "When you need to follow this process"
        },
        {
            "location": "/project/rfcs/#gathering-feedback",
            "text": "It's often helpful to gather feedback before diving too deeply into your new concept, just in case someone knows how to\nsolve it with the current release or with a small easy patch. This can save time for all concerned.  Once you're convinced that this feature  is  required, it's also helpful to obtain feedback prior to submitting your\nRFC. You may open an issue in the  RFC repo  to start a high-level discussion,\nwith the goal of eventually opening an RFC pull request with all the details gathered together in one document.",
            "title": "Gathering Feedback"
        },
        {
            "location": "/project/rfcs/#the-rfc-process",
            "text": "There is a pre-process (hinted at above) and then the process itself.  As hinted at above, you can perform initial data gathering, obtain feedback, and perform some analysis. You may create\nan issue so that everyone on the project can see it and help you gather what you need. This step is optional. You may\ngo straight into the process itself.   Fork the  RFC repo  repo  Copy  YYYYMMDD-template.md  file to  1-incoming/20170906-my-feature.md  (fill in todays date and  my-feature \n  describes your feature in a few words)  Fill in the RFC. Put care into the details:  RFCs that do not present convincing motivation, demonstrate\n  understanding of the impact of the design, or are disingenuous about the drawbacks or alternatives tend to be\n  poorly-received .  Submit a pull request (with a 'Closes #nnn' of the issue number used for initial feedback).  As an RFC in the  reviewing  stage, it will be moved from  1-incoming  to  2-reviewing  under a new pull request for\n  discussion. It will now receive design feedback from the larger community. This PR will link back to the initial data\n  gathering ticket, as well as the pull request ticket.  Under the new  reviewing  issue, build consensus and integrate feedback. RFCs that have broad support are much more\n  likely to make progress than those that don't receive any comments. The author should be prepared to revise their\n  pull request with additional commits in response to any feedback received.  Eventually, the core team will decide whether the RFC is a candidate for inclusion into The Donatinator.  RFCs that are candidates for inclusion in The Donatinator will enter a \"final comment period\" lasting 7 days. The\n  beginning of this period will be signaled with a comment such as \"Final comment period.\" and label on the RFC's pull\n  request. Furthermore,  The Donatinator's official Twitter account  will post a\n  tweet about the RFC to attract the community's attention.  An RFC can be modified based upon feedback from the core team and community. Significant modifications may trigger a\n  new final comment period.  An RFC may be rejected by the core team after public discussion has settled and comments have been made summarizing\n  the rationale for rejection. A member of the core team should then close the RFC's associated pull request.  An RFC may be accepted at the close of its final comment period. A core team member will merge the RFC's associated\n  pull request, at which point the RFC will become 'active'.   If accepted, the  reviewing  PR will be updated to move the RFC to  3-accepted . If not it'll be moved to 5-rejected . Once the RFC has been accepted, anyone (not just the original proposer) can start to implement it. If the RFC is being actively worked on, it'll stay in the  3-accepted  stage.",
            "title": "The RFC Process"
        },
        {
            "location": "/project/rfcs/#the-rfc-life-cycle",
            "text": "Once an RFC becomes active then authors may implement it and submit the feature as a pull request to The Donatinator repo . Moving to the  accepted  state is not a rubber\nstamp, and in particular still does not mean the feature will ultimately be merged; it does mean that the core team has\nagreed to it in principle and are amenable to merging it.  Furthermore, the fact that a given RFC has been accepted implies nothing about what priority is assigned to its\nimplementation, nor whether anybody is currently working on it. If you're interested, it is worth asking around to see\nif anybody has an active interest in the RFC at any level.  Modifications to accepted/in-progress RFC's can be done in followup PR's. We strive to write each RFC in a manner that\nit will reflect the final design of the feature; but the nature of the process means that we cannot expect every merged\nRFC to actually reflect what the end result will be at the time of the next major release; therefore we try to keep\neach RFC document somewhat in sync with the language feature as planned, tracking such changes via followup pull\nrequests to the document.",
            "title": "The RFC Life-Cycle"
        },
        {
            "location": "/project/rfcs/#implementing-an-rfc",
            "text": "The author of an RFC is not obligated to implement it. Of course, the RFC author (like any other developer) is welcome\nto post an implementation for review after the RFC has been accepted.  If you are interested in working on the implementation for an 'active' RFC, but cannot determine if someone else is\nalready working on it, feel free to ask (e.g. by leaving a comment on the associated issue).",
            "title": "Implementing an RFC"
        },
        {
            "location": "/project/rfcs/#reviewing-rfcs",
            "text": "At regular intervals, the core team will attempt to review whatever is currently in the RFC repo. This may involve\nmoving things along, providing feedback, or rejecting them entirely.",
            "title": "Reviewing RFC's"
        },
        {
            "location": "/project/rfcs/#credits",
            "text": "Thanks to the following projects for having RFC processes that we were able to build on for our own process:   https://github.com/yarnpkg/rfcs  https://github.com/rust-lang/rfcs  https://github.com/emberjs/rfcs   (Ends)",
            "title": "Credits"
        },
        {
            "location": "/project/code-of-conduct/",
            "text": "Code of Conduct\n\n\nOur Pledge\n\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n\nOur Standards\n\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n\n\n\nUsing welcoming and inclusive language\n\n\nBeing respectful of differing viewpoints and experiences\n\n\nGracefully accepting constructive criticism\n\n\nFocusing on what is best for the community\n\n\nShowing empathy towards other community members\n\n\n\n\nExamples of unacceptable behavior by participants include:\n\n\n\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n\n\nTrolling, insulting/derogatory comments, and personal or political attacks\n\n\nPublic or private harassment\n\n\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\n\n\nOther conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n\n\n\nOur Responsibilities\n\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n\nScope\n\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n\nEnforcement\n\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at \nandychilton@gmail.com\n. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n\nAttribution\n\n\nThis Code of Conduct is adapted from the\n\nContributor Covenant\n,\nversion 1.4, available at\n\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct/\n.\n\n\nThis Page\n\n\nThis copy of the code of conduct lives in the\n\ndocs\n\nrepository and is published on the docs site at\n\nCode of Conduct\n\nfor viewing.",
            "title": "Code of Conduct"
        },
        {
            "location": "/project/code-of-conduct/#code-of-conduct",
            "text": "",
            "title": "Code of Conduct"
        },
        {
            "location": "/project/code-of-conduct/#our-pledge",
            "text": "In the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.",
            "title": "Our Pledge"
        },
        {
            "location": "/project/code-of-conduct/#our-standards",
            "text": "Examples of behavior that contributes to creating a positive environment\ninclude:   Using welcoming and inclusive language  Being respectful of differing viewpoints and experiences  Gracefully accepting constructive criticism  Focusing on what is best for the community  Showing empathy towards other community members   Examples of unacceptable behavior by participants include:   The use of sexualized language or imagery and unwelcome sexual attention or\n  advances  Trolling, insulting/derogatory comments, and personal or political attacks  Public or private harassment  Publishing others' private information, such as a physical or electronic\n  address, without explicit permission  Other conduct which could reasonably be considered inappropriate in a\n  professional setting",
            "title": "Our Standards"
        },
        {
            "location": "/project/code-of-conduct/#our-responsibilities",
            "text": "Project maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.  Project maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.",
            "title": "Our Responsibilities"
        },
        {
            "location": "/project/code-of-conduct/#scope",
            "text": "This Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.",
            "title": "Scope"
        },
        {
            "location": "/project/code-of-conduct/#enforcement",
            "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at  andychilton@gmail.com . All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.  Project maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.",
            "title": "Enforcement"
        },
        {
            "location": "/project/code-of-conduct/#attribution",
            "text": "This Code of Conduct is adapted from the Contributor Covenant ,\nversion 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct/ .",
            "title": "Attribution"
        },
        {
            "location": "/project/code-of-conduct/#this-page",
            "text": "This copy of the code of conduct lives in the docs \nrepository and is published on the docs site at Code of Conduct \nfor viewing.",
            "title": "This Page"
        },
        {
            "location": "/project/license/",
            "text": "Licenses\n\n\nCode\n\n\nAll code is licensed under the \nAGPLv3\n.\n\n\nDocumentation\n\n\nAll documentation is licensed under a \nCreative Commons Attribution-ShareAlike 4.0 International License\n.\n\n\n(Ends)",
            "title": "License"
        },
        {
            "location": "/project/license/#licenses",
            "text": "",
            "title": "Licenses"
        },
        {
            "location": "/project/license/#code",
            "text": "All code is licensed under the  AGPLv3 .",
            "title": "Code"
        },
        {
            "location": "/project/license/#documentation",
            "text": "All documentation is licensed under a  Creative Commons Attribution-ShareAlike 4.0 International License .  (Ends)",
            "title": "Documentation"
        },
        {
            "location": "/about/why/",
            "text": "Why a Donor Portal?\n\n\nRecently I've been helping a small charity set up the ability to take online donations. After initial discussions about\nwhat they would need to consider and what technical problems we had to solve, we started on the research path to find\nout what hosting environments were needed and who could already provide this.\n\n\nBut as a programmer, something was already tickling the back of my brain. Most, if not all, of the services required\nwould have to be paid for and, to be honest, it all seemed too hard.\n\n\n(Note: I have a blog post brewing with all of the things we encountered, so I'll link to that from here soon.)\n\n\nThere is a \nbig\n list of roadblocks we hit along the way, but the main thing came down to this:\n\n\n\n\nBeing able to use your own domain with HTTPS (TLS/SSL) is going to cost money.\n\n\n\n\nAs a programmer who knows how to get free/cheap hosting, free SSL certificates (thanks to LetsEncrypt) I just thought\nto myself that a small charity shouldn't \nhave\n to pay someone to do all of this for them. I think they \ncan\n pay\nsomeone if they want to, but to me, there didn't seem like there was a simple and free option out there they could use.\n\n\nIn the end, I just started programming \nThe Donatinator\n on the hope that the charity would use it and I could open\nsource it for anyone else to use too! Unfortunately the charity found a solution called 'DonorBox' which I looked at\nand told them that it looked perfect for their use case. They decided to use that instead.\n\n\nI was obviously sad about this ...\n\n\n... however, there is still a gap in the market ...\n\n\n... and that made me more determined to carry on and make something out of this great start!\n\n\nSo I continued to develop \nThe Donatinator\n and now it is more than capable of doing most of what you need.\n\n\n-- Andrew Chilton (2017-08-29)\n\n\n(Ends)",
            "title": "Why a Donor Portal?"
        },
        {
            "location": "/about/why/#why-a-donor-portal",
            "text": "Recently I've been helping a small charity set up the ability to take online donations. After initial discussions about\nwhat they would need to consider and what technical problems we had to solve, we started on the research path to find\nout what hosting environments were needed and who could already provide this.  But as a programmer, something was already tickling the back of my brain. Most, if not all, of the services required\nwould have to be paid for and, to be honest, it all seemed too hard.  (Note: I have a blog post brewing with all of the things we encountered, so I'll link to that from here soon.)  There is a  big  list of roadblocks we hit along the way, but the main thing came down to this:   Being able to use your own domain with HTTPS (TLS/SSL) is going to cost money.   As a programmer who knows how to get free/cheap hosting, free SSL certificates (thanks to LetsEncrypt) I just thought\nto myself that a small charity shouldn't  have  to pay someone to do all of this for them. I think they  can  pay\nsomeone if they want to, but to me, there didn't seem like there was a simple and free option out there they could use.  In the end, I just started programming  The Donatinator  on the hope that the charity would use it and I could open\nsource it for anyone else to use too! Unfortunately the charity found a solution called 'DonorBox' which I looked at\nand told them that it looked perfect for their use case. They decided to use that instead.  I was obviously sad about this ...  ... however, there is still a gap in the market ...  ... and that made me more determined to carry on and make something out of this great start!  So I continued to develop  The Donatinator  and now it is more than capable of doing most of what you need.  -- Andrew Chilton (2017-08-29)  (Ends)",
            "title": "Why a Donor Portal?"
        },
        {
            "location": "/about/faq/",
            "text": "F.A.Q.\n\n\nGeneral\n\n\nToDo.\n\n\nPayment Processor\n\n\nWhy are you using Stripe as a payment processor and not PayPal / Braintree / Payment Express or anything else?\n\n\nThere are ultimately two reasons why we decided to go with Stripe.\n\n\nThe first reason we decided on Stripe above all others is because their interfaces for all vested parties is\nexcellent. The end-user experience is the best we have come across. Their dashboard for the account itself is clean,\ncrisp, and clear. And finally the docs, API, and provided libraries for the developer is the best in class.\n\n\nThe second reason we decided to concentrate on only one payment processor is because they all provide their service in\nsubtly different ways even though they all provide a similar service.  Most of the complicated logic in our app lies\nwith talking to the payment processor, hence by keeping us focussed on only one we can keep our application smaller,\nmore stable, and as reliable as we can.\n\n\nWhat do I need to do to set myself up with Stripe?\n\n\nPlease see their documentation for more details. (ToDo: provide a link here.)\n\n\n(Ends)",
            "title": "FAQ"
        },
        {
            "location": "/about/faq/#faq",
            "text": "",
            "title": "F.A.Q."
        },
        {
            "location": "/about/faq/#general",
            "text": "ToDo.",
            "title": "General"
        },
        {
            "location": "/about/faq/#payment-processor",
            "text": "Why are you using Stripe as a payment processor and not PayPal / Braintree / Payment Express or anything else?  There are ultimately two reasons why we decided to go with Stripe.  The first reason we decided on Stripe above all others is because their interfaces for all vested parties is\nexcellent. The end-user experience is the best we have come across. Their dashboard for the account itself is clean,\ncrisp, and clear. And finally the docs, API, and provided libraries for the developer is the best in class.  The second reason we decided to concentrate on only one payment processor is because they all provide their service in\nsubtly different ways even though they all provide a similar service.  Most of the complicated logic in our app lies\nwith talking to the payment processor, hence by keeping us focussed on only one we can keep our application smaller,\nmore stable, and as reliable as we can.  What do I need to do to set myself up with Stripe?  Please see their documentation for more details. (ToDo: provide a link here.)  (Ends)",
            "title": "Payment Processor"
        },
        {
            "location": "/about/contact/",
            "text": "Contact\n\n\nThere is a \n#donatinator\n channel on Freenode if you would like to hang out, chat, and discuss how you could use or\ncontribute to The Donatinator.\n\n\nYou can always email Andrew Chilton on andychilton at gmail dot com if you'd like to know more.\n\n\nComing Soon\n\n\nWe're hoping to get a discussion forum up and running for publically accessible/searchable discussions soon.\n\n\n(Ends)",
            "title": "Contact"
        },
        {
            "location": "/about/contact/#contact",
            "text": "There is a  #donatinator  channel on Freenode if you would like to hang out, chat, and discuss how you could use or\ncontribute to The Donatinator.  You can always email Andrew Chilton on andychilton at gmail dot com if you'd like to know more.",
            "title": "Contact"
        },
        {
            "location": "/about/contact/#coming-soon",
            "text": "We're hoping to get a discussion forum up and running for publically accessible/searchable discussions soon.  (Ends)",
            "title": "Coming Soon"
        }
    ]
}